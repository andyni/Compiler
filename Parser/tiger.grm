structure A = Absyn

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE
  | UMINUS 

%nonterm  exp | program | decs | dec | sequence | funlist | intexp | ifstmt
 | compexp | boolop | comptype | tydec | ty | record | recordlist |
 tyfields | vardec | fundec | lvalue | evalsequence

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

(* precedence *)
%nonassoc ID THEN
%left OR
%left AND
%nonassoc EQ NEQ GE LE GT LT
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS 
%right LBRACK COMMA ELSE


%%

program	: exp (exp)
	
exp: lvalue ()
   | NIL ()
   | LPAREN evalsequence RPAREN ()
   | intexp (intexp)
   | STRING (A.StringExp(STRING,defaultPos))
   | ID LPAREN funlist RPAREN ()
   | boolop ()
   | record ()
   | ID LBRACK exp RBRACK OF exp ()
   | lvalue ASSIGN exp ()
   | WHILE compexp DO exp ()
   | FOR ID ASSIGN exp TO exp DO exp ()
   | BREAK ()
   | LET decs IN sequence END ()
   | LPAREN exp RPAREN () 
   | IF compexp THEN exp ()
   | IF compexp THEN exp ELSE exp ()

decs : dec dec ()
     | () 

dec : tydec ()
     | vardec ()
     | fundec ()

sequence : exp ()
         | sequence SEMICOLON exp ()
         | ()

evalsequence : exp SEMICOLON exp ()
             | evalsequence SEMICOLON exp()

funlist : exp () 
         | exp COMMA exp ()
         | ()

intexp : intexp PLUS intexp (A.OpExp({left=intexp1,oper=Absyn.PlusOp,right=intexp2,pos=intexp1left}))
	 | intexp MINUS intexp (A.OpExp({left=intexp1,oper=Absyn.MinusOp,right=intexp2,pos=intexp1left}))
	 | intexp TIMES intexp (A.OpExp({left=intexp1,oper=Absyn.TimesOp,right=intexp2,pos=intexp1left}))
	 | intexp DIVIDE intexp (A.OpExp({left=intexp1,oper=Absyn.DivideOp,right=intexp2,pos=intexp1left}))       
         | MINUS intexp (A.OpExp({left=A.IntExp(0),oper=Absyn.MinusOp,right=intexp,pos=intexpleft}))
	 | INT (A.IntExp(INT))

compexp : comptype EQ comptype (A.OpExp({left=comptype1,oper=A.EqOp,right=comptype2,pos=comptype1left}))
	 | comptype NEQ comptype (A.OpExp({left=comptype1,oper=A.NeqOp,right=comptype2,pos=comptype1left}))
	 | comptype LE comptype (A.OpExp({left=comptype1,oper=A.LeOp,right=comptype2,pos=comptype1left}))
	 | comptype LT comptype (A.OpExp({left=comptype1,oper=A.LtOp,right=comptype2,pos=comptype1left}))
	 | comptype GE comptype (A.OpExp({left=comptype1,oper=A.GeOp,right=comptype2,pos=comptype1left}))
	 | comptype GT comptype (A.OpExp({left=comptype1,oper=A.GtOp,right=comptype2,pos=comptype1left}))
         | ID EQ ID  (A.OpExp({left=A.VarExp(A.SimpleVar(ID1,ID1left)),oper=A.EqOp,right=A.VarExp(A.SimpleVar(ID2,ID2right)),pos=ID1left}))
	 | ID NEQ ID (A.OpExp({left=A.VarExp(A.SimpleVar(ID1,ID1left)),oper=A.NeqOp,right=A.VarExp(A.SimpleVar(ID2,ID2right)),pos=ID1left}))
         | intexp (intexp)

boolop : compexp AND compexp ()
	 | compexp OR compexp ()

comptype : STRING (A.StringExp(STRING,defaultPos))
	 | intexp (intexp)

tydec : TYPE ID EQ ty (A.TypeDec({name=ID,ty=ty,pos=defaultPos})) 

ty : ID (A.NameTy(ID,defaultPos))
   | LBRACE tyfields RBRACE (A.RecordTy(tyfields)) 
   | ARRAY OF ID (A.ArrayTy(ID,defaultPos))

record : ID LBRACE recordlist RBRACE ()

recordlist : ID EQ exp ()
           | recordlist COMMA recordlist ()
           | ()

tyfields : ID COLON ID ({name=ID1,escape=true,typ=ID2,pos=ID1left}) 
         | ID COLON ID COMMA tyfields ({name=ID1,escape=true,typ=ID2,pos=ID1left} :: tyfields)
         | (A.NilExp)

vardec : VAR ID ASSIGN exp ()
       | VAR ID COLON ID ASSIGN exp ()

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp ()
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ()

lvalue : ID ()
       | lvalue DOT ID ()
       | lvalue LBRACK exp RBRACK ()  
