structure A = Absyn

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE
  | UMINUS 

%nonterm  exp of A.exp | program of A.exp | decs of A.dec list | dec of A.dec 
 | sequence of (A.exp * A.exp) list  
 | funlist of A.exp list | intexp of A.exp | ifstmt of A.exp
 | compexp of A.exp | boolop of A.exp | comptype of A.exp 
 | tydec of {name: Symbol.symbol, ty: Absyn.ty, pos: pos} 
 | tydecs of {name: Symbol.symbol, ty: Absyn.ty, pos: pos} list
 | ty of A.ty 
 | tyfields of A.field list
 | record of A.exp | recordlist of (A.symbol * A.exp * A.pos) list  
 | vardec of A.dec 
 | fundec of Absyn.fundec
 | fundecs of Absyn.fundec list
 | lvalue of A.var | evalsequence of (A.exp * A.pos) list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

(* precedence *)
%nonassoc ID THEN
%left OR
%left AND
%nonassoc EQ NEQ GE LE GT LT
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS 
%right LBRACK COMMA ELSE


%%

program	: exp (exp)
	
exp: lvalue (A.VarExp(lvalue))
   | NIL (A.NilExp)
   | LPAREN evalsequence RPAREN (A.SeqExp(evalsequence))
   | intexp (intexp)
   | STRING (A.StringExp(STRING,defaultPos))
   | ID LPAREN funlist RPAREN (A.CallExp({func=Symbol.symbol(ID), args=funlist, pos=IDleft}))
   | boolop (boolop)
   | record (record)
   | ID LBRACK exp RBRACK OF exp (A.ArrayExp({typ=Symbol.symbol(ID), size=exp1, init=exp2,
   pos=ID1left}))
   | ID LBRACK exp RBRACK (A.VarExp(A.SubscriptVar(A.SimpleVar(Symbol.symbol(ID),defaultPos),exp,defaultPos)))
   | lvalue ASSIGN exp (A.AssignExp({var=lvalue,exp=exp,pos=lvalue1left}))
   | WHILE compexp DO exp (A.WhileExp({test=compexp,body=exp,pos=WHILE1left}))
   | FOR ID ASSIGN exp TO exp DO exp
   (A.ForExp({var=Symbol.symbol(ID),escape=ref true,lo=exp1,hi=exp2,body=exp3,pos=defaultPos}))
   | BREAK (A.BreakExp(defaultPos))
   | LET decs IN sequence END
   (A.LetExp({decs=decs,body=A.SeqExp(sequence),pos=defaultPos}))
   | LPAREN exp RPAREN (exp) 
   | IF compexp THEN exp (A.IfExp({test=compexp,then'=exp,else'=NONE,pos=defaultPos}))
   | IF compexp THEN exp ELSE exp (A.IfExp({test=compexp,then'=exp1,else'=SOME(exp2),pos=defaultPos}))

decs : dec decs (dec::decs)
     | (nil) 

dec : tydecs (A.TypeDec(tydecs))
     | vardec (vardec)
     | fundecs (A.FunctionDec(fundecs))

vardec : VAR ID ASSIGN exp (A.VarDec({name=Symbol.symbol(ID),escape=ref true,typ=NONE,init=exp,pos=ID1left}))
       | VAR ID COLON ID ASSIGN exp (A.VarDec({name=Symbol.symbol(ID1),escape=ref true,typ=SOME(Symbol.symbol(ID2),ID2left),init=exp,pos=ID1left}))

fundecs: fundec ([fundec])
       | fundec fundecs (fundec::fundecs)

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp ({name=Symbol.symbol(ID),params=tyfields, result=NONE, body=exp, pos=defaultPos})
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ({name=Symbol.symbol(ID1),params=tyfields, result=SOME(Symbol.symbol(ID2), ID2left), body=exp, pos=ID1left})

tydecs: tydec ([tydec])
      | tydec tydecs (tydec::tydecs)

tydec : TYPE ID EQ ty ({name=Symbol.symbol(ID),ty=ty,pos=defaultPos}) 

sequence : exp ([(exp,defaultPos)])
         | exp SEMICOLON sequence ((exp,defaultPos)::sequence)
         | (nil)

evalsequence : exp SEMICOLON exp ([(exp1,exp1left),(exp2,exp2left)])
             | exp SEMICOLON evalsequence  ((exp,exp1left)::evalsequence)

funlist : exp ([exp]) 
         | exp COMMA funlist (exp::funlist)
         | ([])

intexp : intexp PLUS intexp (A.OpExp({left=intexp1,oper=Absyn.PlusOp,right=intexp2,pos=intexp1left}))
	 | intexp MINUS intexp (A.OpExp({left=intexp1,oper=Absyn.MinusOp,right=intexp2,pos=intexp1left}))
	 | intexp TIMES intexp (A.OpExp({left=intexp1,oper=Absyn.TimesOp,right=intexp2,pos=intexp1left}))
	 | intexp DIVIDE intexp (A.OpExp({left=intexp1,oper=Absyn.DivideOp,right=intexp2,pos=intexp1left}))       
         | MINUS intexp (A.OpExp({left=A.IntExp(0),oper=Absyn.MinusOp,right=intexp,pos=intexpleft}))
	 | INT (A.IntExp(INT))

compexp : comptype EQ comptype (A.OpExp({left=comptype1,oper=A.EqOp,right=comptype2,pos=comptype1left}))
	 | comptype NEQ comptype (A.OpExp({left=comptype1,oper=A.NeqOp,right=comptype2,pos=comptype1left}))
	 | comptype LE comptype (A.OpExp({left=comptype1,oper=A.LeOp,right=comptype2,pos=comptype1left}))
	 | comptype LT comptype (A.OpExp({left=comptype1,oper=A.LtOp,right=comptype2,pos=comptype1left}))
	 | comptype GE comptype (A.OpExp({left=comptype1,oper=A.GeOp,right=comptype2,pos=comptype1left}))
	 | comptype GT comptype (A.OpExp({left=comptype1,oper=A.GtOp,right=comptype2,pos=comptype1left}))
         | ID EQ ID  (A.OpExp({left=A.VarExp(A.SimpleVar(Symbol.symbol(ID1),ID1left)),oper=A.EqOp,right=A.VarExp(A.SimpleVar(Symbol.symbol(ID2),ID2right)),pos=defaultPos}))
	 | ID NEQ ID (A.OpExp({left=A.VarExp(A.SimpleVar(Symbol.symbol(ID1),ID1left)),oper=A.NeqOp,right=A.VarExp(A.SimpleVar(Symbol.symbol(ID2),ID2right)),pos=defaultPos}))
         | intexp (intexp)

boolop : compexp AND compexp (A.IfExp({test=compexp1, then'=compexp2, else'=SOME(A.IntExp(0)),pos=defaultPos}))
	 | compexp OR compexp (A.IfExp({test=compexp1, then'=A.IntExp(1),
	 else'=SOME(compexp2), pos=defaultPos}))

comptype : STRING (A.StringExp(STRING,defaultPos))
	 | intexp (intexp)

ty : ID (A.NameTy(Symbol.symbol(ID),defaultPos))
   | LBRACE tyfields RBRACE (A.RecordTy(tyfields)) 
   | ARRAY OF ID (A.ArrayTy(Symbol.symbol(ID),defaultPos))

record : ID LBRACE recordlist RBRACE (A.RecordExp({fields=recordlist,
typ=Symbol.symbol(ID), pos=ID1left}))

recordlist : ID EQ exp ([(Symbol.symbol(ID),exp,defaultPos)])
           | ID EQ exp COMMA recordlist ((Symbol.symbol(ID),exp,ID1left)::recordlist)

tyfields : ID COLON ID ([{name=Symbol.symbol(ID1),escape=ref true,typ=Symbol.symbol(ID2),pos=ID1left}]) 
         | ID COLON ID COMMA tyfields ({name=Symbol.symbol(ID1),escape=ref true,typ=Symbol.symbol(ID2),pos=ID1left} :: tyfields)
         | (nil)

lvalue : ID (A.SimpleVar(Symbol.symbol(ID),defaultPos))
       | lvalue DOT ID (A.FieldVar(lvalue,Symbol.symbol(ID),lvalue1left))
       | lvalue LBRACK exp RBRACK (A.SubscriptVar(lvalue,exp,lvalue1left))  
